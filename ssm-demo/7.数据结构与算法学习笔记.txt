1.数组从0开始编号：cpu在取数组元素时的公式：初始地址+i*单位长度。i是数组元素个数，如果从1开始编号，会多出一条（i-1）的指令。


2.LRU淘汰算法—— 书房大扫除，应该淘汰哪些书？
先进先出，最少使用策略，最近最少使用策略。
时间和空间相互转换的设计思想。
使用链表：
1.链表元素按照使用的时间排队，最近的排在队首。
2.新元素过来：遍历链表，1.如果存在，则移动到头部。
                                           2.如果不存在，并且缓存未满，加入头部。
                                           3.如果缓存满了，淘汰尾部的一个节点，头部添加。

使用数组（循环数组）：
一个数组，一个头指针，标识数组的头，一个计数器，记录数组元素长度，数组元素下标通过%计算。

3.LinkedHashMap使用的是双向链表。

4.摊还分析：当n-1次的操作耗时O(1)，1次的操作耗时O(n)，且有规律可循，则可直接将O(n)均摊到其他的n-1次耗时上去，以此来计算平均耗时。

5.jvm 把内存分成，代码区，静态数据区，动态数据区。
代码区存放：二进制代码信息，调度信息。
静态数据区：静态变量，常量，String常量。
动态数据区：堆和栈。堆上放new出来的对象，对象的地址则保存在栈中。所有java线程都可以访问到，栈是线程自己的一块存储空间，由于天然符合后进先出的特性，栈被用于处理函数的调用，每一片栈帧存放的是函数调用的参数，局部参数，返回值。
6.在线程池已满的情况下，可以让请求排队，此时，如果对时间敏感的请求来说，需要一个数组类型的队列，当队列满时，直接拒绝请求。
7.待解决：1.HashMap进一步深入阅读。LinkedHashMap阅读。

笔记：
找出散列函数，装载因子，动态扩容策略，散列冲突解决方法。

散列函数：原生的hashCode是取对象在jvm中32位地址。
          hashmap对key散列时：取出jvm地址，将其逻辑右移16位得到一个正数，然后两者做异或操作。

初始化：hashmap在初始化时只会指定容量大小，不会申请空间。
在第一次put的时候，根据容量*加载因子申请空间。16*0.75f。


扩容机制：在put时，当散列表容量达到  装载因子*容量   时，触发扩容。
           如果容量>2的30次方，则直接设置为最大整数。
		   如果容量>16并<2的30次方，申请一个原来容量2倍的数组。
		   然后遍历原数组，将旧数组数据重新计算（hash&数组容量-1）存储位置，存入新数组。

判重机制：当两个key散列到一个地方，并且==或者equals，则视为同一个元素，将原来node的值替换。

散列表冲突：1.开发寻址法：如线性探测，向后找空闲位置；重新散列
            2.链表法，拉一条链表，当重复元素>8,则会改成红黑树。



